generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  COMPANY_ADMIN
  EMPLOYEE
  CLIENT
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELED
  CONFIRMED
  PAYMENT_FAILED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  CANCELED
  REFUNDED
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model User {
  id                   Int                @id @default(autoincrement())
  name                 String
  email                String             @unique
  password             String
  role                 UserRole
  companyId            Int?
  company              Company?           @relation(fields: [companyId], references: [id])
  // Para clientes: citas que ellos agendan
  appointments         Appointment[]
  // Para empleados: citas asignadas (usando una relación nombrada para distinguirlas)
  employeeAppointments Appointment[]      @relation("EmployeeAppointments")
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
}

model Company {
  id             Int             @id @default(autoincrement())
  name           String
  logo           String?
  primaryColor   String?
  secondaryColor String?
  schedulingPage SchedulingPage?
  // Relación con los usuarios (administradores, empleados y clientes)
  users          User[]
  // Servicios que ofrece la empresa
  services       Service[]
  // Citas asociadas a la empresa
  appointments   Appointment[]
}

model SchedulingPage {
  id             Int             @id @default(autoincrement())
  companyId      Int             @unique
  company        Company         @relation(fields: [companyId], references: [id])
  slug           String?         @unique
  background     String?
  title          String?
  description    String?
  customCss      String?
  customJs       String?
  operatingHours OperatingHour[]
}

model OperatingHour {
  id               Int             @id @default(autoincrement())
  dayOfWeek        DayOfWeek
  openTime         String          // Ejemplo: "09:00"
  closeTime        String          // Ejemplo: "17:00"
  schedulingPageId Int?
  schedulingPage   SchedulingPage? @relation(fields: [schedulingPageId], references: [id])
}

model Service {
  id          Int           @id @default(autoincrement())
  companyId   Int
  company     Company       @relation(fields: [companyId], references: [id])
  name        String
  description String
  duration    Int           // Duración en minutos
  active      Boolean       @default(true)
  appointments Appointment[]
}

model Appointment {
  id              Int              @id @default(autoincrement())
  userId          Int
  user            User             @relation(fields: [userId], references: [id])
  companyId       Int
  company         Company          @relation(fields: [companyId], references: [id])
  serviceId       Int
  service         Service          @relation(fields: [serviceId], references: [id])
  employeeId      Int?
  employee        User?            @relation("EmployeeAppointments", fields: [employeeId], references: [id])
  dateTime        DateTime
  status          AppointmentStatus
  paymentStatus   PaymentStatus?
  paymentIntentId String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}
